SRCDIR=$LLVM_STAGE2_SRC/compiler-rt
BUILDDIR=$COMPILER_RT_DIR/build
DESTDIR=$COMPILER_RT_DIR

# see https://llvm.org/docs/HowToCrossCompileBuiltinsOnArm.html

C_FLAGS=( -fPIC )
CXX_FLAGS=( -fPIC )
LD_FLAGS=(
  -fuse-ld=lld \
  -B"$BUILD_DIR_S2/phony" \
  -resource-dir="$BUILTINS_DIR/" \
  -L$LIBCXX_DIR/lib \
)
# LD_FLAGS+=( -Wl,-z,notext )
# LD_FLAGS+=( -fPIC )
CMAKE_ARGS=()
CMAKE_ARGS+=( -DCMAKE_SYSTEM_NAME=Linux )

# CMAKE_ARGS+=( -DLLVM_ENABLE_LTO=Thin ); C_FLAGS+=( -flto=thin )
# C_FLAGS+=( -fno-lto )

C_FLAGS+=(
  -isystem$LIBCXX_DIR/usr/include \
  -isystem$S1_CLANGRES_DIR/include \
)
CXX_FLAGS+=(
  "-I$LIBCXX_DIR/usr/include/c++/v1" \
  "-isystem$SYSROOT/usr/include" \
  -isystem$LIBCXX_DIR/usr/include \
  -isystem$S1_CLANGRES_DIR/include \
)

CMAKE_ARGS+=( -DCOMPILER_RT_CXX_LIBRARY=libcxx )

# CMAKE_ARGS+=( -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON )
# CMAKE_ARGS+=( -DCOMPILER_RT_USE_LLVM_UNWINDER=ON )
# CMAKE_ARGS+=( -DCOMPILER_RT_ENABLE_STATIC_UNWINDER=ON )

SANITIZERS_TO_BUILD=()
SANITIZERS_TO_BUILD+=( asan )
SANITIZERS_TO_BUILD+=( dfsan )
SANITIZERS_TO_BUILD+=( msan )
SANITIZERS_TO_BUILD+=( hwasan )
SANITIZERS_TO_BUILD+=( tsan )
SANITIZERS_TO_BUILD+=( safestack )
SANITIZERS_TO_BUILD+=( cfi )
# SANITIZERS_TO_BUILD+=( scudo_standalone )
SANITIZERS_TO_BUILD+=( ubsan_minimal )
SANITIZERS_TO_BUILD+=( gwp_asan )
SANITIZERS_TO_BUILD+=( asan_abi )

# CMAKE_ARGS+=( --fresh )
if [ $HOST_SYS = macos ]; then
  CMAKE_ARGS+=( -DCMAKE_HOST_SYSTEM_NAME=Darwin )
fi

CMAKE_ARGS+=( \
  -DCMAKE_INSTALL_RPATH="\$ORIGIN/../lib;/lib" \
  -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
)

cmake -G Ninja -S "$LLVM_STAGE2_SRC/compiler-rt" -B "$BUILDDIR" \
  -DCMAKE_BUILD_TYPE=MinSizeRel \
  -DCMAKE_SYSROOT="$SYSROOT" \
  -DCMAKE_INSTALL_PREFIX="$DESTDIR" \
  \
  -DCMAKE_AR="$AR" \
  -DCMAKE_NM="$LLVM_STAGE1_DIR/bin/llvm-nm" \
  -DCMAKE_RANLIB="$RANLIB" \
  -DCMAKE_C_COMPILER="$CC" \
  -DCMAKE_CXX_COMPILER="$CC" \
  \
  -DLLVM_CMAKE_DIR="$LLVM_STAGE2_DIR-build" \
  -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
  -DLLVM_BUILTIN_TARGETS="$(_array_join ";" ${TARGET_TRIPLES[@]})" \
  \
  -DCMAKE_ASM_COMPILER_TARGET="$TARGET_TRIPLE" \
  -DCMAKE_ASM_FLAGS="${C_FLAGS[*]}" \
  \
  -DCMAKE_C_COMPILER_TARGET="$TARGET_TRIPLE" \
  -DCMAKE_C_FLAGS="${C_FLAGS[*]}" \
  \
  -DCMAKE_CXX_COMPILER_TARGET="$TARGET_TRIPLE" \
  -DCMAKE_CXX_FLAGS="${CXX_FLAGS[*]}" \
  \
  -DCMAKE_EXE_LINKER_FLAGS="${LD_FLAGS[*]}" \
  -DCMAKE_SHARED_LINKER_FLAGS="${LD_FLAGS[*]}" \
  -DCMAKE_MODULE_LINKER_FLAGS="${LD_FLAGS[*]}" \
  \
  -DCOMPILER_RT_BUILD_BUILTINS=ON \
  -DCOMPILER_RT_BUILD_SANITIZERS=ON \
  -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
  -DCOMPILER_RT_BUILD_MEMPROF=OFF \
  -DCOMPILER_RT_BUILD_PROFILE=OFF \
  -DCOMPILER_RT_BUILD_XRAY=OFF \
  -DCOMPILER_RT_BUILD_CRT=OFF \
  -DCOMPILER_RT_BUILD_ORC=OFF \
  -DCOMPILER_RT_BUILD_SCUDO=OFF \
  -DCOMPILER_RT_BUILD_STANDALONE_LIBATOMIC=OFF \
  \
  -DCOMPILER_RT_SANITIZERS_TO_BUILD="$(_array_join ";" "${SANITIZERS_TO_BUILD[@]}")" \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON \
  -DCOMPILER_RT_INCLUDE_TESTS=OFF \
  \
  -DLIBUNWIND_ENABLE_SHARED=OFF \
  -DLIBCXX_ENABLE_SHARED=OFF \
  -DLIBCXXABI_ENABLE_SHARED=OFF \
  \
  -DSANITIZER_USE_STATIC_CXX_ABI=ON \
  -DCOMPILER_RT_HAS_VERSION_SCRIPT=OFF \
  \
  ${CMAKE_ARGS[@]:-}

ninja -v -C "$BUILDDIR" compiler-rt
# ninja -C "$BUILDDIR" builtins

ninja -C "$BUILDDIR" install
# rm -rf "$BUILDDIR"
